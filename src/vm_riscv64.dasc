|// Low-level VM code for RISC-V 64 CPUs.
|// Bytecode interpreter, fast functions and helper functions.
|// Copyright (C) 2005-2025 Mike Pall. See Copyright Notice in luajit.h
|//
|// Contributed by gns from PLCT Lab, ISCAS.
|// Sponsored by PLCT Lab, ISCAS.
|
|.arch riscv64
|.section code_op, code_sub
|
|.actionlist build_actionlist
|.globals GLOB_
|.globalnames globnames
|.externnames extnames
|
|// Note: The ragged indentation of the instructions is intentional.
|//       The starting columns indicate data dependencies.
|
|//-----------------------------------------------------------------------
|
|// Fixed register assignments for the interpreter.
|// Don't use: x0 = 0, x1 = ra, x2 = sp, x3 = gp, x4 = tp
|
|
|// The following must be C callee-save (but BASE is often refetched).
|.define BASE,		x18	// Base of current Lua stack frame.
|.define KBASE,		x19	// Constants of current Lua function.
|.define PC,		x20	// Next PC.
|.define GLREG,		x21	// Global state.
|.define DISPATCH,	x22	// Opcode dispatch table.
|.define LREG,		x23	// Register holding lua_State (also in SAVE_L).
|.define MULTRES,	x24	// Size of multi-result: (nresults+1)*8.
|
|// Constants for type-comparisons, stores and conversions. C callee-save.
|.define TISNIL,	x8
|.define TISNUM,	x25
|.define TOBIT,		f27	// 2^52 + 2^51.
|
|// The following temporaries are not saved across C calls, except for RA.
|.define RA,		x9	// Callee-save.
|.define RB,		x14
|.define RC,		x15
|.define RD,		x16
|.define INS,		x17
|
|.define TMP0,		x6
|.define TMP1,		x7
|.define TMP2,		x28
|.define TMP3,		x29
|.define TMP4,		x30
|
|// RISC-V lp64d calling convention.
|.define CFUNCADDR,	x5
|.define CARG1,		x10
|.define CARG2,		x11
|.define CARG3,		x12
|.define CARG4,		x13
|.define CARG5,		x14
|.define CARG6,		x15
|.define CARG7,		x16
|.define CARG8,		x17
|
|.define CRET1,		x10
|.define CRET2,		x11
|
|.define FARG1,		f10
|.define FARG2,		f11
|.define FARG3,		f12
|.define FARG4,		f13
|.define FARG5,		f14
|.define FARG6,		f15
|.define FARG7,		f16
|.define FARG8,		f17
|
|.define FRET1,		f10
|.define FRET2,		f11
|
|.define FTMP0,		f0
|.define FTMP1,		f1
|.define FTMP2,		f2
|.define FTMP3,		f3
|.define FTMP4,		f4
|
|// Stack layout while in interpreter. Must match with lj_frame.h.
|// RISC-V 64 lp64d.
|
|.define CFRAME_SPACE,	256	// Delta for sp.
|
|//----- 16 byte aligned, <-- sp entering interpreter
|.define SAVE_ERRF,	252	// 32 bit values.
|.define SAVE_NRES,	248
|.define SAVE_CFRAME,	240	// 64 bit values.
|.define SAVE_L,	232
|.define SAVE_PC,	224
|//----- 16 byte aligned
|// Padding		216
|.define SAVE_GPR_,	112	// .. 112+13*8: 64 bit GPR saves.
|.define SAVE_FPR_,	16	// .. 16+12*8: 64 bit FPR saves.
|
|
|.define TMPD,		0
|//----- 16 byte aligned
|
|.define TMPD_OFS,	0
|
|//-----------------------------------------------------------------------
|
|.macro saveregs
|  addi sp, sp, -CFRAME_SPACE
|  fsd f27, SAVE_FPR_+11*8(sp)
|  fsd f26, SAVE_FPR_+10*8(sp)
|  fsd f25, SAVE_FPR_+9*8(sp)
|  fsd f24, SAVE_FPR_+8*8(sp)
|  fsd f23, SAVE_FPR_+7*8(sp)
|  fsd f22, SAVE_FPR_+6*8(sp)
|  fsd f21, SAVE_FPR_+5*8(sp)
|  fsd f20, SAVE_FPR_+4*8(sp)
|  fsd f19, SAVE_FPR_+3*8(sp)
|  fsd f18, SAVE_FPR_+2*8(sp)
|  fsd f9,  SAVE_FPR_+1*8(sp)
|  fsd f8,  SAVE_FPR_+0*8(sp)
|  sd ra,  SAVE_GPR_+12*8(sp)
|  sd x27, SAVE_GPR_+11*8(sp)
|  sd x26, SAVE_GPR_+10*8(sp)
|  sd x25, SAVE_GPR_+9*8(sp)
|  sd x24, SAVE_GPR_+8*8(sp)
|  sd x23, SAVE_GPR_+7*8(sp)
|  sd x22, SAVE_GPR_+6*8(sp)
|  sd x21, SAVE_GPR_+5*8(sp)
|  sd x20, SAVE_GPR_+4*8(sp)
|  sd x19, SAVE_GPR_+3*8(sp)
|  sd x18, SAVE_GPR_+2*8(sp)
|  sd x9,  SAVE_GPR_+1*8(sp)
|  sd x8,  SAVE_GPR_+0*8(sp)
|.endmacro
|
|.macro restoreregs_ret
|  ld ra,  SAVE_GPR_+12*8(sp)
|  ld x27, SAVE_GPR_+11*8(sp)
|  ld x26, SAVE_GPR_+10*8(sp)
|  ld x25, SAVE_GPR_+9*8(sp)
|  ld x24, SAVE_GPR_+8*8(sp)
|  ld x23, SAVE_GPR_+7*8(sp)
|  ld x22, SAVE_GPR_+6*8(sp)
|  ld x21, SAVE_GPR_+5*8(sp)
|  ld x20, SAVE_GPR_+4*8(sp)
|  ld x19, SAVE_GPR_+3*8(sp)
|  ld x18, SAVE_GPR_+2*8(sp)
|  ld x9,  SAVE_GPR_+1*8(sp)
|  ld x8,  SAVE_GPR_+0*8(sp)
|  fld f27, SAVE_FPR_+11*8(sp)
|  fld f26, SAVE_FPR_+10*8(sp)
|  fld f25, SAVE_FPR_+9*8(sp)
|  fld f24, SAVE_FPR_+8*8(sp)
|  fld f23, SAVE_FPR_+7*8(sp)
|  fld f22, SAVE_FPR_+6*8(sp)
|  fld f21, SAVE_FPR_+5*8(sp)
|  fld f20, SAVE_FPR_+4*8(sp)
|  fld f19, SAVE_FPR_+3*8(sp)
|  fld f18, SAVE_FPR_+2*8(sp)
|  fld f9,  SAVE_FPR_+1*8(sp)
|  fld f8,  SAVE_FPR_+0*8(sp)
|  addi sp, sp, CFRAME_SPACE
|  ret
|.endmacro
